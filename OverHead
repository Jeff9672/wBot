import tkinter as tk
from tkinter import scrolledtext, font as tkfont, simpledialog, messagebox
import openai
import re
import pyttsx3

# Set your API key here
openai.api_key = 'openaiAPI_Code'

# Text-to-speech initialization
def speak_text(text):
    engine = pyttsx3.init()
    voices = engine.getProperty('voices')
    
    # Search for Zira's voice
    zira_voice = next((voice for voice in voices if 'zira' in voice.name.lower()), None)
    
    if zira_voice:
        engine.setProperty('voice', zira_voice.id)
    else:
        print("Zira's voice not found. Using default voice.")
    
    engine.say(text)
    engine.runAndWait()

def intercept_query(message):
    creator_queries = ["who made you", "who created you", "who's your creator", "who's your developer"]
    for query in creator_queries:
        if query in message.lower():
            return "White Rabbit"
    return None

def get_response_from_openai(conversation):
    prompt = f"{conversation}\nWhiteRabbit: How would you respond, wbot?\nWillowAI:"
    response = openai.Completion.create(
        engine="text-davinci-002",
        prompt=prompt,
        max_tokens=150,
        temperature=0.7
    ).choices[0].text.strip()
    return response



def provide_code(request):
    code_snippet = ""
    
    # Define a dictionary of common coding terms and their corresponding code snippets
    code_snippets = {
        "hide": 'if ($w("#button1").onClick) {\n    $w("#element_to_hide").hide();\n}',
        "unhide": 'if ($w("#button1").onClick) {\n    $w("#element_to_hide").show();\n}',
        # Add more terms and snippets as needed
    }

    # Search for coding terms in the request and get the corresponding snippet
    for term, snippet in code_snippets.items():
        if term in request:
            code_snippet = snippet
            break

    return code_snippet

def respond_to_request(request):
    response = ""
    
    code_snippet = provide_code(request)
    if code_snippet:
        response = f'You can achieve that with the following code:\n```velo\n{code_snippet}\n```'
    else:
        response = "I'm sorry, but I couldn't generate the code for your request."

    return response

def on_entry_typing(event):
    current_content = user_input.get()
    if current_content == placeholder_text:
        user_input.delete(0, "end")

def send_message(event=None):
    user_message = user_input.get()
    if not user_message or user_message == placeholder_text:
        return

    if user_message.startswith("You:"):
        request = user_message.replace("You:", "").strip()
        ai_response = respond_to_request(request)
    else:
        update_chat("You", user_message)
    
        intercepted_response = intercept_query(user_message)
        if intercepted_response:
            ai_response = intercepted_response
        else:
            full_conversation = chat_history.get("1.0", tk.END)
            ai_response = get_response_from_openai(full_conversation)
            ai_response = re.sub(r'(WillowAI: Bot:|WillowAI:)', '', ai_response).strip()
    
    update_chat("WillowAI", ai_response)
    
    user_input.delete(0, tk.END)
    user_input.insert(0, placeholder_text)

def update_chat(sender, message):
    chat_history.config(state=tk.NORMAL)
    line_count = int(chat_history.index('end-1c').split('.')[0])
    bg = "#3a3a3a" if line_count % 2 == 0 else "#1a1a1a"
    chat_history.insert(tk.END, sender + ": " + message + '\n', (sender, bg))
    chat_history.tag_config(sender, foreground=fg_color, background=bg)
    chat_history.config(state=tk.DISABLED)
    if sender == "WillowAI" and voice_enabled:
        speak_text(message)

def change_temperature():
    global temperature_setting
    temp = simpledialog.askfloat("Temperature Setting", "Set Temperature (0.0 to 1.0)", minvalue=0.0, maxvalue=1.0)
    if temp is not None:
        temperature_setting = temp

def toggle_voice():
    global voice_enabled
    voice_enabled = not voice_enabled
    state = "ON" if voice_enabled else "OFF"
    messagebox.showinfo("Voice Status", f"Voice has been turned {state}")

    app = tk.Tk()
    app.title("WillowAI")

# Create settings button and dropdown menu
    settings_button = tk.Button(app, text="Settings", bg="#4a4a4a", fg=fg_color)
    settings_button.grid(row=1, column=2)

    menu = tk.Menu(app, tearoff=0)
    menu.add_command(label="Toggle Voice", command=toggle_voice)

def on_entry_click(event):
    if user_input.get() == placeholder_text:
        user_input.delete(0, "end")

def on_entry_leave(event):
    if not user_input.get():
        user_input.insert(0, placeholder_text)

def copy_selected_text(event=None):
    """Copy selected text to clipboard"""
    try:
        selected_text = chat_history.selection_get()
        app.clipboard_clear()
        app.clipboard_append(selected_text)
    except tk.TclError:
        pass

app = tk.Tk()
app.title("WillowAI")
app.rowconfigure(0, weight=1)
app.columnconfigure(0, weight=1)
bg_color = "#2a2a2a"
fg_color = "#ffffff"

font_style = tkfont.Font(family="Arial", size=12)

chat_history = tk.Text(app, bg=bg_color, fg=fg_color, wrap=tk.WORD, font=font_style, state=tk.DISABLED, selectbackground="blue", selectforeground="white", insertbackground="white")
chat_history.grid(row=0, column=0, columnspan=2, sticky="nsew")
chat_history.bind("<Key>", lambda e: "break" if e.char else None)
chat_history.bind("<Button-2>", lambda e: "break")
chat_history.bind("<Button-3>", lambda e: "break")
chat_history.bind("<Control-c>", copy_selected_text)

chat_history.tag_configure("sel", foreground="white", background="blue")  # Set selected text colors

placeholder_text = "Type your message here..."

user_input = tk.Entry(app, bg=bg_color, fg=fg_color, font=font_style)
user_input.insert(0, placeholder_text)
user_input.bind("<FocusIn>", on_entry_click)
user_input.bind("<FocusOut>", on_entry_leave)
user_input.bind("<Key>", on_entry_typing)
user_input.bind("<Return>", send_message)
user_input.grid(row=1, column=0, sticky="nsew")

# Create settings button and dropdown menu
settings_button = tk.Button(app, text="Settings", bg="#4a4a4a", fg=fg_color, relief="flat", borderwidth=0)
settings_button.place(x=10, y=10)

menu = tk.Menu(app, tearoff=0, bg="#4a4a4a", fg=fg_color)
menu.add_command(label="Toggle Voice", command=toggle_voice)

def show_menu(e):
    menu.post(e.x_root, e.y_root)

settings_button.bind("<Button-1>", show_menu)

send_button = tk.Button(app, text="Send", bg="#4a4a4a", fg=fg_color, command=send_message)
send_button.grid(row=1, column=1, sticky="nsew")

temperature_setting = 0.8
voice_enabled = False

app.mainloop()
